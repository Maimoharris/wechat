

<div class="chat-container">
  <div class="conversation-header">
    <div class="conversation-user">
      <a href="/chats" class="back-btn">
        <i class="fa-solid fa-arrow-left"></i>
      </a>
      <div class="avatar-wrapper">
        <img src="<%= otherUser.profilePicture %>" alt="<%= otherUser.username %>" class="avatar">
        <span class="user-status <%= new Date() - new Date(otherUser.lastSeen) < 300000 ? 'online' : 'offline' %>" data-user-id="<%= otherUser._id %>"></span>
      </div>
      <div class="user-info">
        <h3><%= otherUser.username %></h3>
        <p class="status-text" id="status-text"><%= new Date() - new Date(otherUser.lastSeen) < 300000 ? 'Online' : 'Last seen ' + new Date(otherUser.lastSeen).toLocaleString() %></p>
      </div>
    </div>
    <div class="conversation-actions">
      <button id="delete-conversation" data-user-id="<%= otherUser._id %>">
        <i class="fa-solid fa-trash"></i>
      </button>
    </div>
  </div>
  
  <div class="messages-container" id="messages-container">
    <% if (messages.length === 0) { %>
      <div class="empty-messages">
        <div class="empty-icon">
          <i class="fa-solid fa-comments"></i>
        </div>
        <p>No messages yet</p>
        <p class="empty-subtitle">Send your first message below</p>
      </div>
    <% } else { %>
      <% 
        let currentDate = '';
        messages.forEach(message => {
          const messageDate = new Date(message.createdAt).toLocaleDateString();
          const showDateDivider = currentDate !== messageDate;
          if (showDateDivider) {
            currentDate = messageDate;
      %>
        <div class="date-divider">
          <span><%= messageDate === new Date().toLocaleDateString() ? 'Today' : messageDate %></span>
        </div>
      <% } %>
        <div class="message <%= message.sender.toString() === currentUserId ? 'sent' : 'received' %>" data-message-id="<%= message._id %>">
          <div class="message-content">
            <p><%= message.content %></p>
            <div class="message-meta">
              <span class="message-time">
                <%= new Date(message.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
              </span>
              <% if (message.sender.toString() === currentUserId) { %>
                <span class="message-status">
                  <i class="fa-solid <%= message.read ? 'fa-check-double' : 'fa-check' %>"></i>
                </span>
                <button class="delete-message-btn" data-message-id="<%= message._id %>">
                  <i class="fa-solid fa-trash-can"></i>
                </button>
              <% } %>
            </div>
          </div>
        </div>
      <% }); %>
    <% } %>
  </div>
  
  <div class="message-input-container">
    <div class="message-input-wrapper">
      <textarea id="message-input" placeholder="Type a message..." rows="1"></textarea>
      <button id="send-button" disabled>
        <i class="fa-solid fa-paper-plane"></i>
      </button>
    </div>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const messagesContainer = document.getElementById('messages-container');
  const messageInput = document.getElementById('message-input');
  const sendButton = document.getElementById('send-button');
  const currentUserId = '<%= currentUserId %>';
  const recipientId = '<%= otherUser._id %>';
  
  // Scroll to bottom of messages
  function scrollToBottom() {
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }
  
  // Initialize
  scrollToBottom();
  
  // Auto-resize textarea
  messageInput.addEventListener('input', function() {
    this.style.height = 'auto';
    this.style.height = (this.scrollHeight) + 'px';
    
    // Enable/disable send button
    sendButton.disabled = this.value.trim() === '';
  });
  
  // Handle Enter key
  messageInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && !e.shiftKey && !sendButton.disabled) {
      e.preventDefault();
      sendMessage();
    }
  });
  
  // Connect to Socket.io
  const socket = io();
  
  // Mark user as connected
  socket.emit('user_connected', currentUserId);
  
  // Listen for user status changes
  socket.on('user_status_change', (data) => {
    if (data.userId === recipientId) {
      const statusIndicator = document.querySelector(`.user-status[data-user-id="${data.userId}"]`);
      const statusText = document.getElementById('status-text');
      
      statusIndicator.classList.remove('online', 'offline');
      statusIndicator.classList.add(data.status);
      
      if (data.status === 'online') {
        statusText.textContent = 'Online';
      } else {
        statusText.textContent = 'Offline';
      }
    }
  });
  
  // Listen for incoming messages
  socket.on('receive_message', (data) => {
    if (data.senderId === recipientId) {
      addMessageToDOM({
        content: data.message,
        sender: data.senderId,
        createdAt: data.timestamp,
        _id: Date.now(),  // Temporary ID until page refresh
        read: false
      }, false);
      
      // Mark messages as read
      markMessagesAsRead();
    }
  });
  
  // Send message
  async function sendMessage() {
    const content = messageInput.value.trim();
    if (!content) return;
    
    try {
      const response = await fetch('/api/messages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          recipientId,
          content
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        // Add message to DOM
        addMessageToDOM({
          content,
          sender: currentUserId,
          createdAt: new Date(),
          _id: data.message.id,
          read: false
        }, true);
        
        // Emit message to recipient
        socket.emit('send_message', {
          senderId: currentUserId,
          recipientId,
          message: content
        });
        
        // Reset input
        messageInput.value = '';
        messageInput.style.height = 'auto';
        sendButton.disabled = true;
      }
    } catch (error) {
      console.error('Error sending message:', error);
    }
  }
  
  // Add message to DOM
  function addMessageToDOM(message, isSent) {
    // Check if we need to add a date divider
    const messageDate = new Date(message.createdAt).toLocaleDateString();
    const lastDateDivider = messagesContainer.querySelector('.date-divider:last-of-type');
    
    if (!lastDateDivider || lastDateDivider.textContent.trim() !== messageDate) {
      const dateDivider = document.createElement('div');
      dateDivider.className = 'date-divider';
      dateDivider.innerHTML = `<span>${messageDate === new Date().toLocaleDateString() ? 'Today' : messageDate}</span>`;
      messagesContainer.appendChild(dateDivider);
    }
    
    // Create message element
    const messageEl = document.createElement('div');
    messageEl.className = `message ${isSent ? 'sent' : 'received'}`;
    messageEl.dataset.messageId = message._id;
    
    messageEl.innerHTML = `
      <div class="message-content">
        <p>${message.content}</p>
        <div class="message-meta">
          <span class="message-time">
            ${new Date(message.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
          </span>
          ${isSent ? `
            <span class="message-status">
              <i class="fa-solid ${message.read ? 'fa-check-double' : 'fa-check'}"></i>
            </span>
            <button class="delete-message-btn" data-message-id="${message._id}">
              <i class="fa-solid fa-trash-can"></i>
            </button>
          ` : ''}
        </div>
      </div>
    `;
    
    messagesContainer.appendChild(messageEl);
    scrollToBottom();
    
    // Add event listener for delete button
    if (isSent) {
      const deleteBtn = messageEl.querySelector('.delete-message-btn');
      deleteBtn.addEventListener('click', handleDeleteMessage);
    }
  }
  
  // Delete message
  async function handleDeleteMessage(e) {
    const messageId = e.currentTarget.dataset.messageId;
    
    if (confirm('Are you sure you want to delete this message?')) {
      try {
        const response = await fetch(`/chats/message/${messageId}`, {
          method: 'DELETE'
        });
        
        const data = await response.json();
        
        if (data.success) {
          const messageEl = document.querySelector(`.message[data-message-id="${messageId}"]`);
          messageEl.remove();
        }
      } catch (error) {
        console.error('Error deleting message:', error);
      }
    }
  }
  
  // Mark messages as read
  async function markMessagesAsRead() {
    try {
      await fetch(`/api/messages/read/${recipientId}`, {
        method: 'PUT'
      });
    } catch (error) {
      console.error('Error marking messages as read:', error);
    }
  }
  
  // Add event listeners
  sendButton.addEventListener('click', sendMessage);
  document.querySelectorAll('.delete-message-btn').forEach(btn => {
    btn.addEventListener('click', handleDeleteMessage);
  });
  
  // Delete conversation
  document.getElementById('delete-conversation').addEventListener('click', async () => {
    if (confirm('Are you sure you want to delete this entire conversation? This action cannot be undone.')) {
      try {
        const response = await fetch(`/chats/${recipientId}`, {
          method: 'DELETE'
        });
        
        const data = await response.json();
        
        if (data.success) {
          window.location.href = '/chats';
        }
      } catch (error) {
        console.error('Error deleting conversation:', error);
      }
    }
  });
  
  // Mark messages as read when page loads
  markMessagesAsRead();
</script>